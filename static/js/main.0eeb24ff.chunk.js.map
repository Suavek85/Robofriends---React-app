{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","fetch","then","response","json","users","_this3","filteredRobots","filter","robot","toLocaleLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAmBeA,EAjBF,SAAAC,GAAyB,IAAtBC,EAAsBD,EAAtBC,KAAMC,EAAgBF,EAAhBE,MAAOC,EAASH,EAATG,GAI7B,OAEAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDACfH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,QAAQC,IAAG,wBAAAC,OAA0BP,EAA1B,cACpBC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,MCUWS,EAjBE,SAAAX,GAAiB,IAAbY,EAAaZ,EAAbY,OAIjB,OAAQR,EAAAC,EAAAC,cAAA,WAEJM,EAAOC,IAAI,SAACC,EAAKC,GAEb,OAAOX,EAAAC,EAAAC,cAACU,EAAD,CAAMC,IAAKF,EAAGZ,GAAMS,EAAOG,GAAGZ,GAAIF,KAAQW,EAAOG,GAAGd,KAAMC,MAASU,EAAOG,GAAGb,YCAjFgB,EAXG,SAAAlB,GAAmCA,EAAhCmB,YAAgC,IAAnBC,EAAmBpB,EAAnBoB,aAElC,OAEAhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAKH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,oCAAoCc,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,MCW9GI,SAfA,SAACC,GAEhB,OACArB,EAAAC,EAAAC,cAAA,OAAKoB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAEjEJ,EAAMK,YCoDKC,cA9Cb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAiBFI,eAAiB,SAAAC,GACfR,EAAKS,SAAS,CAAEtB,YAAaqB,EAAME,OAAOC,SAjB1CX,EAAKY,MAAQ,CACXhC,OAAQ,GACRO,YAAa,IAJHa,mFAQM,IAAAa,EAAAV,KAClBW,MAAM,8CACHC,KAAK,SAAAC,GACJ,OAAOA,EAASC,SAEjBF,KAAK,SAAAG,GACJL,EAAKJ,SAAS,CAAE7B,OAAQsC,uCAQrB,IAAAC,EAAAhB,KACDiB,EAAiBjB,KAAKS,MAAMhC,OAAOyC,OAAO,SAAAC,GAC9C,OAAOA,EAAMrD,KACVsD,oBACAC,SAASL,EAAKP,MAAMzB,YAAYoC,uBAGrC,OAAKpB,KAAKS,MAAMhC,OAAO6C,OAInBrD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,eACAH,EAAAC,EAAAC,cAACoD,EAAD,CAAWtC,aAAce,KAAKI,iBAC9BnC,EAAAC,EAAAC,cAACqD,EAAD,KACAvD,EAAAC,EAAAC,cAACsD,EAAD,CAAUhD,OAAQwC,MAPfhD,EAAAC,EAAAC,cAAA,gCA/BKuD,aCFEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECTNC,IAASC,OAAQhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SDkH5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.0eeb24ff.chunk.js","sourcesContent":["import React from'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n\r\n    //const { name, email, id } = props;\r\n\r\nreturn (\r\n\r\n<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n<img alt='photo' src={`https://robohash.org/${id}?200x200`} / >\r\n<div>\r\n<h2>{name}</h2>\r\n<p>{email}</p>\r\n</div>\r\n</div>\r\n);\r\n\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\n\r\nconst CardList = ( { robots }) => {\r\n\r\n\r\n\r\n    return (<div>{\r\n\r\n        robots.map((user,i) => {\r\n    \r\n            return <Card key={i} id = {robots[i].id} name = {robots[i].name} email = {robots[i].email} / >  })\r\n          \r\n\r\n\r\n\r\n    }</div>);\r\n\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n\r\nreturn (\r\n\r\n<div className='tc'><input className='pa3 ba  b--green bg-lightest-blue' type='search' placeholder='search robots' onChange={searchChange} /></div>\r\n\r\n\r\n)\r\n\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\r\nreturn (\r\n<div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\r\n\r\n   {props.children}\r\n\r\n</div>\r\n\r\n\r\n);\r\n\r\n\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\n//import { robots } from \"./robots\";\r\nimport \"./App.css\";\r\nimport Scroll from \"../components/Scroll\";\r\n\r\n//const state = {\r\n//robots: robots,\r\n//searchfield: ''\r\n//}\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots: [],\r\n      searchfield: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(response => {\r\n        return response.json();\r\n      })\r\n      .then(users => {\r\n        this.setState({ robots: users });\r\n      });\r\n  }\r\n\r\n  onSearchChange = event => {\r\n    this.setState({ searchfield: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    const filteredRobots = this.state.robots.filter(robot => {\r\n      return robot.name\r\n        .toLocaleLowerCase()\r\n        .includes(this.state.searchfield.toLocaleLowerCase());\r\n    });\r\n\r\n    if (!this.state.robots.length) {\r\n      return <h1>Loading....</h1>;\r\n    } else {\r\n      return (\r\n        <div className=\"tc\">\r\n          <h1 className=\"f1\">RoboFriends</h1>\r\n          <SearchBox searchChange={this.onSearchChange} />\r\n          <Scroll>\r\n          <CardList robots={filteredRobots} />\r\n          </Scroll>\r\n       \r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render( <App />, document.getElementById('root'));\n\n\n\n\n\n\n        // If you want your app to work offline and load faster, you can change\n        // unregister() to register() below. Note this comes with some pitfalls.\n        // Learn more about service workers: http://bit.ly/CRA-PWA\n        serviceWorker.unregister();"],"sourceRoot":""}